name: microservice-balance

volumes:
  postgres-data:
    driver: local
  pgadmin4-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local
  balance-service-http-data:
    driver: local
  promtail-data:
    driver: local
  loki-data:
    driver: local

services:

  balance-service-http:
    build:
      context: ./deployment/docker/balance/http
      dockerfile: Dockerfile
    volumes:
      - ./:/balance
      - ./config/balance:/config/balance
      - ./.go-pkg:/go/pkg
      - ./.go-cache:/go-cache
    working_dir: /balance
    ports:
      - "$BALANCE_HTTP_PORT:8080"
    env_file:
      - .env
    environment:
      GOCACHE: /go-cache
      GOPATH: /go/pkg
    depends_on:
      postgres:
        condition: service_healthy
    labels: { logging: "promtail" }
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    
  postgres:
    # profiles: [donotstart]
    image: postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - TZ=UTC
      - PGTZ=UTC
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
        interval: 5s
        timeout: 5s
        retries: 5

  pgadmin4:
    # profiles: [donotstart]
    image: dpage/pgadmin4
    env_file:
      - .env
    environment:
      PGADMIN_LISTEN_PORT: 8080
    restart: unless-stopped
    ports:
      - 8082:8080

  prometheus:
    # profiles: [donotstart]
    container_name: prometheus_container
    image: prom/prometheus
    restart: unless-stopped
    volumes: 
      - ./deployment/prometheus:/etc/prometheus/
      - prometheus-data:/prometheus
    ports:
      - 9090:9090

  grafana:
    # profiles: [donotstart]
    container_name: grafana_container
    image: grafana/grafana
    restart: unless-stopped
    volumes:
      - ./deployment/grafana:/etc/grafana/provisioning/datasources
      - grafana-data:/var/lib/grafana
    ports:
      - 3000:3000
    env_file:
      - .env

  loki:
    image: grafana/loki:3.3.2
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./deployment/loki:/etc/loki

    # mem_limit: 4g
    # cpus: 4.0
    # ulimits:
    #   nofile:
    #     soft: 65536
    #     hard: 65536
        
  promtail:
    image: grafana/promtail:3.3.2
    command: -config.file=/etc/promtail/docker-config.yaml
    volumes:
      - ./deployment/promtail/promtail.yaml:/etc/promtail/docker-config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on: [loki]

  jaeger:
    container_name: jaeger_container
    image: jaegertracing/all-in-one:1.6.0
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 14268:14268
      - 14250:14250
      - 9411:9411